/**
 * Test espec√≠fico para verificar que el dropdown del bot√≥n "Reporte Diario" funcione
 */

import { test, expect } from '@playwright/test';

test('üìã Verificar que funciona el dropdown del bot√≥n Reporte Diario', async ({ page }) => {
    console.log('üîç Iniciando test del bot√≥n Reporte Diario...');

    // 1. Ir al login y autenticarse
    await page.goto('/login');
    console.log('üìç Navegando a la p√°gina de login');

    await page.fill('input[name="email"]', 'admin@test.com');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForURL('/dashboard');
    console.log('‚úÖ Login exitoso - En el dashboard');

    // 2. Localizar el bot√≥n de "Reporte Diario"
    const reporteButton = page.locator('#reporteButton');
    await expect(reporteButton).toBeVisible();
    console.log('‚úÖ Bot√≥n "Reporte Diario" encontrado y visible');

    // 3. Verificar que el texto del bot√≥n sea correcto
    await expect(reporteButton).toContainText('Reporte Diario');
    console.log('‚úÖ Texto del bot√≥n verificado: "Reporte Diario"');

    // 4. Verificar que el dropdown existe pero est√© oculto inicialmente
    const dropdown = page.locator('#reporteDropdown');
    await expect(dropdown).not.toBeVisible();
    console.log('‚úÖ Dropdown inicialmente oculto (correcto)');

    // 5. Hacer clic en el bot√≥n de "Reporte Diario"
    console.log('üñ±Ô∏è Haciendo clic en el bot√≥n "Reporte Diario"...');
    await reporteButton.click();

    // 6. Esperar un momento para que aparezca el dropdown
    await page.waitForTimeout(300);

    // 7. Verificar que el dropdown se haga visible
    await expect(dropdown).toBeVisible();
    console.log('‚úÖ ¬°DROPDOWN APARECE CORRECTAMENTE!');

    // 8. Verificar que el dropdown contiene las opciones PDF y CSV
    const pdfOption = page.locator('a[href*="formato=pdf"]');
    const csvOption = page.locator('a[href*="formato=csv"]');

    await expect(pdfOption).toBeVisible();
    await expect(csvOption).toBeVisible();
    console.log('‚úÖ Opciones PDF y CSV visibles en el dropdown');

    // 9. Verificar los textos de las opciones
    await expect(pdfOption).toContainText('Descargar PDF');
    await expect(csvOption).toContainText('Descargar CSV');
    console.log('‚úÖ Textos de las opciones correctos');

    // 10. Verificar que se puede cerrar haciendo clic fuera
    await page.click('h1'); // Hacer clic en el t√≠tulo para cerrar
    await page.waitForTimeout(200);
    await expect(dropdown).not.toBeVisible();
    console.log('‚úÖ Dropdown se cierra al hacer clic fuera');

    // 11. Abrir dropdown nuevamente para verificar que funciona m√∫ltiples veces
    await reporteButton.click();
    await page.waitForTimeout(200);
    await expect(dropdown).toBeVisible();
    console.log('‚úÖ Dropdown se puede abrir m√∫ltiples veces');

    // 12. Verificar que se cierra con la tecla Escape
    await page.keyboard.press('Escape');
    await page.waitForTimeout(200);
    await expect(dropdown).not.toBeVisible();
    console.log('‚úÖ Dropdown se cierra con tecla Escape');

    // 13. Screenshot final mostrando el dropdown abierto
    await reporteButton.click();
    await page.waitForTimeout(200);
    await page.screenshot({
        path: 'reporte-diario-dropdown-funcionando.png',
        fullPage: true
    });
    console.log('üì∏ Screenshot guardado: reporte-diario-dropdown-funcionando.png');

    console.log('üéâ ¬°TEST COMPLETADO! El bot√≥n Reporte Diario funciona perfectamente');
});

test('üì± Verificar dropdown en dispositivo m√≥vil', async ({ page }) => {
    // Simular dispositivo m√≥vil
    await page.setViewportSize({ width: 375, height: 667 });

    console.log('üì± Probando dropdown en m√≥vil...');

    // Login
    await page.goto('/login');
    await page.fill('input[name="email"]', 'admin@test.com');
    await page.fill('input[name="password"]', 'password');
    await page.click('button[type="submit"]');
    await page.waitForURL('/dashboard');

    // Localizar bot√≥n y verificar funcionamiento
    const reporteButton = page.locator('#reporteButton');
    const dropdown = page.locator('#reporteDropdown');

    await expect(reporteButton).toBeVisible();
    await expect(dropdown).not.toBeVisible();

    // Probar con touch (evento t√°ctil)
    await reporteButton.tap();
    await page.waitForTimeout(300);

    await expect(dropdown).toBeVisible();
    console.log('‚úÖ Dropdown funciona en m√≥vil con tap');

    // Screenshot m√≥vil
    await page.screenshot({
        path: 'reporte-diario-movil.png',
        fullPage: true
    });
    console.log('üì∏ Screenshot m√≥vil guardado');
});
